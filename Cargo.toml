[package]
name = "vogelsang"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[workspace]

members = []

[dependencies]
erfurt = { path = "../erfurt" }
degiro-rs = { path = "../degiro-rs", features = ["erfurt"] }
qualsdorf = { path = "../qualsdorf" }
master-of-puppets = { path = "../master_of_puppets/" }
async-trait = "0.1"
statrs = "0.16"
tokio = { version = "1.21.1", features = ["full"] }
toml = "0.8"
config = "0.14"
clap = { version = "4.0", features = ["derive"] }
serde = { version = "1.0", features = ["derive"] }
chrono = { version = "0.4", features = ["serde"] }
dashmap = "5"
futures = "0.3"
comfy-table = "7"
itertools = "0.12"
owo-colors = "4.0.0"
thiserror = "1.0"
serde_json = "1.0"
bincode = "1.3.3"
rayon = "1.8"
strum = { version = "0.26", features = ["derive"] }
nalgebra = "0.32"
nalgebra-mvn = "0.14"
tap = "1.0"
tokio-stream = "0.1"
tokio-util = { version = "0.7", features = ["codec"] }
tracing = "0.1"
tracing-subscriber = "0.3"
atomic-take = "1.1"
regex = "1.10"
heed = "0.11"
anyhow = "1.0.79"
reqwest = { version = "0.11.23", default-features = false }
egui = "0.26.2"
eframe = "0.26.2"

[lints.clippy]
all = { level = "warn" }
# restriction
dbg_macro = "warn"
todo = "warn"
unimplemented = "warn"
# I like the explicitness of this rule as it removes confusion around `clone`.
# This increases readability, avoids `clone` mindlessly and heap allocating on accident.
clone_on_ref_ptr = "warn"
# These two are mutually exclusive, I like `mod.rs` files for better fuzzy searches on module entries.
self_named_module_files = "warn"         # "-Wclippy::mod_module_files"
empty_drop = "warn"
empty_structs_with_brackets = "warn"
exit = "warn"
filetype_is_file = "warn"
get_unwrap = "warn"
impl_trait_in_params = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
rest_pat_in_fully_bound_structs = "warn"
unnecessary_safety_comment = "warn"
undocumented_unsafe_blocks = "warn"
# I want to write the best Rust code so pedantic is enabled.
# We should only disable rules globally if they are either false positives, chaotic, or does not make sense.
pedantic = { level = "warn", priority = -1 }
# Allowed rules
# pedantic
# This rule is too pedantic, I don't want to force this because naming things are hard.
module_name_repetitions = "allow"
# All triggers are mostly ignored in this codebase, so this is ignored globally.
struct_excessive_bools = "allow"
too_many_lines = "allow"
doc_markdown = "allow"
# nursery
# `const` functions do not make sense for our project because this is not a `const` library.
# This rule also confuses new comers and forces them to add `const` blindlessly without any reason.
missing_const_for_fn = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"
